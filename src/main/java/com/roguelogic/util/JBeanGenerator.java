/*
 Copyright 2008 Robert C. Ilardi

 Licensed under the Apache License, Version 2.0 (the "License");
 you may not use this file except in compliance with the License.
 You may obtain a copy of the License at

 http://www.apache.org/licenses/LICENSE-2.0

 Unless required by applicable law or agreed to in writing, software
 distributed under the License is distributed on an "AS IS" BASIS,
 WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 See the License for the specific language governing permissions and
 limitations under the License.
 */

/*
 * Created Apr 11, 2008
 */

package com.roguelogic.util;

import java.io.File;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.OutputStream;
import java.io.StringReader;
import java.util.ArrayList;
import java.util.HashMap;

import org.xml.sax.InputSource;
import org.xml.sax.XMLReader;
import org.xml.sax.helpers.XMLReaderFactory;

/**
 * @author Robert C. Ilardi
 *
 */

public class JBeanGenerator {

  public static final String GENERATOR_NAME = "RogueLogic Java Bean Code Generator";
  public static final String GENERATOR_VERSION = "1.0";

  public static final String CODE_GENERATION_NOTICE = "The Class(es) generated by the Code Generator should NOT be changed manually!";

  public static final String LICENSE = " * Copyright 2008 Robert C. Ilardi\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.";

  private String outputDir;
  private String overridePackage;

  public JBeanGenerator() {}

  public String getOutputDir() {
    return outputDir;
  }

  public void setOutputDir(String outputDir) {
    this.outputDir = outputDir;
  }

  public String getOverridePackage() {
    return overridePackage;
  }

  public void setOverridePackage(String overridePackage) {
    this.overridePackage = overridePackage;
  }

  public void generate(String jbDescription) throws RLException, IOException {
    ArrayList<JBean> jBeans;

    jBeans = parseJBeans(jbDescription);

    updatePackages(jBeans);

    for (JBean jb : jBeans) {
      generate(jb);
    }
  }

  protected ArrayList<JBean> parseJBeans(String jbDescription) throws RLException {
    ArrayList<JBean> jBeans = null;
    XMLReader xReader = null;
    JBeanDescriptionXMLParser parser;
    StringReader sReader = null;
    InputSource ins;

    try {
      sReader = new StringReader(jbDescription);
      xReader = XMLReaderFactory.createXMLReader();
      parser = new JBeanDescriptionXMLParser();
      ins = new InputSource(sReader);

      xReader.setContentHandler(parser);
      xReader.setErrorHandler(parser);

      xReader.parse(ins);

      jBeans = parser.getJBeans();
    } //End try block
    catch (Exception e) {
      throw new RLException("An error occurred while attempting to parse the JBean Description! System Message: " + e.getMessage(), e); //I don't want to define what type of exception get's thrown so let's use a generic one.
    }
    finally {
      if (sReader != null) {
        sReader.close();
      }
    }

    return jBeans;
  }

  protected void generate(JBean jb) throws IOException {
    OutputStream outs = null;
    String packageDir;

    try {
      System.out.print("Generating Java Bean Class Code '" + jb.getName() + "' -\n" + jb + "\n\n");

      packageDir = createPackageDir(jb.getPackageName());

      outs = obtainOutputStream(packageDir, jb);

      generateClassFile(jb, outs);

    } //End try block
    finally {
      if (outs != null) {
        try {
          outs.close();
        }
        catch (Exception e) {}
      }
    }
  }

  protected String createPackageDir(String packageName) {
    File dir;
    String packageDir;

    if (!StringUtils.IsNVL(packageName)) {
      packageDir = packageName.replaceAll("\\.", "/");
      packageDir = (new StringBuffer()).append(outputDir).append("/").append(packageDir).toString();
    }
    else {
      packageDir = outputDir;
    }

    dir = new File(packageDir);
    dir.mkdirs();

    return packageDir;
  }

  protected OutputStream obtainOutputStream(String packageDir, JBean jb) throws IOException {
    FileOutputStream fos;
    StringBuffer filename = new StringBuffer();

    filename.append(packageDir);
    filename.append("/");
    filename.append(jb.getName());
    filename.append(".java");

    fos = new FileOutputStream(filename.toString());

    return fos;
  }

  private void generateClassFile(JBean jb, OutputStream outs) throws IOException {
    StringBuffer buf = new StringBuffer();

    //File Comments
    buf.append(getGeneratorComments((new StringBuffer()).append(jb.getName()).append(".java").toString()));

    //Class Header
    buf.append(getClassHeader(jb));

    //Data Members / Fields
    buf.append(getDataMembers(jb));

    //Default Constructor
    buf.append("  public ");
    buf.append(jb.getName());
    buf.append("() {}\n\n");

    //Getters and Setters
    buf.append(getGettersAndSetters(jb));

    //End Class
    buf.append("}\n");

    outs.write(buf.toString().getBytes());
  }

  private String getGeneratorComments(String clientStubFilename) {
    StringBuffer comments = new StringBuffer();

    comments.append("/*\n");

    comments.append(" * ");
    comments.append(clientStubFilename);
    comments.append("\n *\n");

    comments.append(" * Generated on ");
    comments.append(StringUtils.GetTimeStamp());
    comments.append("\n *\n");

    comments.append(" * Generator: ");
    comments.append(GENERATOR_NAME);
    comments.append("\n *\n");

    comments.append(" * Generator Version: ");
    comments.append(GENERATOR_VERSION);
    comments.append("\n *\n");

    comments.append(" * Code Generation Notice: ");
    comments.append(CODE_GENERATION_NOTICE);
    comments.append("\n *\n");

    comments.append(" * License: Apache License V2.0\n *\n");
    comments.append(LICENSE);
    comments.append("\n *\n");

    comments.append(" */\n");

    return comments.toString();
  }

  private String getClassHeader(JBean jb) {
    StringBuffer buf = new StringBuffer();

    //Package
    buf.append("\npackage ");
    buf.append(jb.getPackageName());
    buf.append(";\n\n");

    //Class Declaration
    buf.append("public class ");
    buf.append(jb.getName());
    buf.append(" implements java.io.Serializable {\n\n");

    //Constants
    buf.append("  public static final String _RL_JBEAN_CODE_GENERATOR = \"");
    buf.append(GENERATOR_NAME);
    buf.append("\";\n");

    buf.append("  public static final String _RL_JBEAN_CODE_GENERATOR_VERSION = \"");
    buf.append(GENERATOR_VERSION);
    buf.append("\";\n\n");

    return buf.toString();
  }

  private String getDataMembers(JBean jb) {
    StringBuffer buf = new StringBuffer();

    for (JBeanField f : jb.getFields()) {
      buf.append("  private ");
      buf.append(f.getDataType());

      if (f.isArray()) {
        buf.append("[] ");
      }
      else {
        buf.append(" ");
      }

      buf.append(f.getName());
      buf.append(";\n");
    }

    buf.append("\n");

    return buf.toString();
  }

  private String getGettersAndSetters(JBean jb) {
    StringBuffer buf = new StringBuffer();

    for (JBeanField f : jb.getFields()) {
      //Getter
      buf.append("  public ");
      buf.append(f.getDataType());

      if (f.isArray()) {
        buf.append("[] ");
      }
      else {
        buf.append(" ");
      }

      buf.append(f.getGetter());
      buf.append("() {\n    return ");
      buf.append(f.getName());
      buf.append(";\n  }\n\n");

      //--------------------------------->

      //Setter
      buf.append("  public void ");
      buf.append(f.getSetter());
      buf.append("(");
      buf.append(f.getDataType());

      if (f.isArray()) {
        buf.append("[] ");
      }
      else {
        buf.append(" ");
      }

      buf.append(f.getName());
      buf.append(") {\n    this.");
      buf.append(f.getName());
      buf.append(" = ");
      buf.append(f.getName());
      buf.append(";\n  }\n\n");
    }

    return buf.toString();
  }

  private void updatePackages(ArrayList<JBean> jBeans) {
    HashMap<String, String> beanNameMap;
    String newName;

    if (StringUtils.IsNVL(overridePackage)) {
      return;
    }

    beanNameMap = new HashMap<String, String>();

    for (JBean jb : jBeans) {
      if (!StringUtils.IsNVL(jb.getPackageName())) {
        beanNameMap.put((new StringBuffer()).append(jb.getPackageName()).append(".").append(jb.getName()).toString(), (new StringBuffer()).append(overridePackage).append(".").append(jb.getName())
            .toString());
      }
    }

    for (JBean jb : jBeans) {
      jb.setPackageName(overridePackage);

      if (jb.getFields() == null) {
        continue;
      }

      for (JBeanField f : jb.getFields()) {
        newName = beanNameMap.get(f.getDataType());

        if (!StringUtils.IsNVL(newName)) {
          f.setDataType(newName);
        }
      }
    }
  }

  public static void main(String[] args) {
    JBeanGenerator jbg;
    int exitCd;

    if (args.length < 2) {
      exitCd = 1;
      System.err.println("Usage: java " + JBeanGenerator.class.getName() + " [DESCRITPION] [OUTPUT_DIR] <OVERRIDE_PACKAGE>");
    }
    else {
      try {
        jbg = new JBeanGenerator();

        jbg.setOutputDir(args[1]);

        if (args.length >= 3) {
          jbg.setOverridePackage(args[2]);
        }

        jbg.generate(args[0]);

        exitCd = 0;
      } //End try block
      catch (Exception e) {
        exitCd = 1;
        e.printStackTrace();
      }
    }

    System.exit(exitCd);
  }

}
